size_alloc = 18  # {{sizeAllocation}}
examples = 6
attributes = 3  # {{cellsX}}
no_values = cint.Array(5)
class_attribute = 2 # no clasees

no_values[0] = 2 # {{no_values in attribute 0}}
no_values[1] = 3 # {{no_values in attribute 1}}
no_values[2] = 2 # {{no_values in attribute 2}}
no_values[3] = 0 # {{no_values in attribute 3}}
no_values[4] = 0 # {{no_values in attribute 4}}
classes = sfix.Array(2) # no_values[class_attribute])
vote_classes = sint.Array(2)# same as above
tree = cint.Array(12)# prod(no_values)


data = sint.Matrix(attributes,examples)

def output_random_triples(cond):
  @for_range(attributes)
  def range_body(i):
    # naming as in Damgard et al
    y, r, w = sint.get_random_triple()
    v, un1, un2 = sint.get_random_triple()
    u = v * r
    outp = [y, r, w, v, u]
    output_shares(2,*outp)
    data[i][cond] = y
  return cond + 1

open_channel(0)
open_channel(1)

n = regint.public_input(1)
print_ln("Dataset size %s", n)

open_channel(2)

while_loop(output_random_triples, lambda x: x < examples, 0)

open_channel(3) # construct triples
open_channel(4) # get data

def import_data(cond):
  @for_range(attributes)
  def range_body(i):
    # naming as in Damgard et al
    y = cint.public_input(1000)
    data[i][cond] = y + data[i][cond]
  return cond + 1

while_loop(import_data, lambda x: x < examples, 0)

close_channel(4)
close_channel(3)
close_channel(2)
close_channel(1)
close_channel(0)

# --------------------------------------------------------------------------------------
# ======================================================================================
# --------------------------------------------------------------------------------------

from Compiler import mpc_math
sfloat.vlen = 15
sfloat.plen = 10
sfloat.kappa = 4

# calculate the entropy of class labels 
def entropy(array):
  entropy_address = program.malloc(1, sfix)
  store_in_mem(sfix(0.0), entropy_address)
  @for_range(len(array))
  def body(c):
    percentage = array[c]
    is_zero = sint(percentage == sfloat(0))
    final_percentage = (sint(1) - is_zero) * percentage + sfix(1) * is_zero
    previous_value = sfix.load_mem(entropy_address)
    update = previous_value - sfix(final_percentage) * mpc_math.log2_fx(sfix(final_percentage))
    store_in_mem(update, entropy_address)
  return -sfix.load_mem(entropy_address)

def best_function(current_data):
  minH_address = program.malloc(1, sfix)
  store_in_mem(sfix(100000.0), minH_address)

  best_attr = program.malloc(1, sint)
  store_in_mem(sint(0), best_attr)

  counting_address = program.malloc(1, sint)
  store_in_mem(sint(0), counting_address)

  total_counting_address = program.malloc(1, sint)
  store_in_mem(sint(0), total_counting_address)

  classify = data[class_attribute]

  # for each attribute
  @for_range(class_attribute)
  def body(at):

    count_entropy_address = program.malloc(1, sfix)
    store_in_mem(sfix(0), count_entropy_address)

    # for each attribute value
    @for_range(no_values[at])
    def body2(v):

      # for each class
      @for_range(class_attribute)
      def body3(cl):
        store_in_mem(sint(0), counting_address)
        store_in_mem(sint(0), total_counting_address)

        # for each example in the dataset
        @for_range(len(data[at]))
        def body4(exam):

          counting = sint.load_mem(counting_address)

          to_be_considered = (data[at][exam] == v)
          counting = counting +  to_be_considered * (classify[exam] == cl) 

          total_counting = sint.load_mem(total_counting_address)
          total_counting = total_counting + to_be_considered

          store_in_mem(counting, counting_address)
          store_in_mem(total_counting, total_counting_address)

        classes[cl] = sfloat(sint.load_mem(counting_address))\
         / sfloat(sint.load_mem(total_counting_address)) 
 
      v_entropy = sfix.load_mem(count_entropy_address)
      v_entropy = v_entropy - entropy(classes)
      store_in_mem(v_entropy, count_entropy_address)
      
    attribute_entropy = sfix.load_mem(count_entropy_address)
    current_minH = sfix.load_mem(minH_address)
    update_minH = (attribute_entropy < current_minH) 
    
    minH = update_minH * attribute_entropy + (sint(1) - update_minH) * current_minH

    store_in_mem(minH, minH_address)

    best = sint.load_mem(best_attr)
    new_best = at * update_minH + (sint(1) - update_minH) * best
    store_in_mem(new_best, best_attr)

  return sint.load_mem(best_attr) 

def vote(column):
  le_classes = len(vote_classes)
  clear_class = sint(0, size=le_classes)
  clear_class.store_in_mem(vote_classes.address)

  @for_range(len(column))
  def range_body(i):
    # this only counts class attribute
    @for_range(le_classes)
    def range_body2(j):
      vote_classes[j] = vote_classes[j] + (column[i] == j)
  
  max_address = program.malloc(1,sint)
  store_in_mem(sint(0), max_address)

  majority_vote = program.malloc(1,sint)
  store_in_mem(sint(0), majority_vote)

  @for_range(le_classes)
  def body(i):
    cmax = sint.load_mem(max_address)
    update = (vote_classes[i] >= cmax)
    new_max = update * vote_classes[i] + (cint(1) - update) * cmax
    maj = sint.load_mem(majority_vote)
    new_maj = update * i + (cint(1) - update) * maj
    store_in_mem(new_max, max_address)
    store_in_mem(new_maj, majority_vote)
    
  return sint.load_mem(majority_vote)

def all_the_same(col):
  
  result_address = program.malloc(1, sint)
  store_in_mem(sint(1), result_address)

  @for_range(len(col))
  def body(i):
    result = sint.load_mem(result_address)
    
    new_result = (col[0]!=sint(100)) * result * (col[0] == col[i]) + (col[0]!=sint(100)) * result * (col[i] == sint(100))
    store_in_mem(new_result, result_address)
  
  return sint.load_mem(result_address)

def prune_attribute_from_matrix(matrix, row):
  @for_range(examples)
  def o(i):
    matrix[row][i] = sint(100)
  return matrix

def specify_attribute_value(matrix, dim1,dim2, attrib, value):
  pruned = sint.Matrix(dim1,dim2)
  @for_range(attributes)
  def body(i):
    @for_range(examples)
    def bod(j):
      pruned[i][j] = matrix[i][j] * (matrix[attrib][j] == value) + sint(100) * (matrix[attrib][j] != value)  
  return pruned

def root_function(tree, some_data):
  currently_branching_out = program.malloc(1, cint)
  @for_range(attributes)
  def body(i):
    if_then(i==regint(0))
    split_at = best_function(some_data).reveal()
    tree[i] = split_at
    print_ln("Splitting at %s", split_at)
    store_in_mem(split_at, currently_branching_out)
    else_then()
    @for_range(no_values[cint.load_mem(currently_branching_out)])
    def body2(k):
      pruned = specify_attribute_value(some_data, attributes, examples, cint.load_mem(currently_branching_out), k)
      pruned = prune_attribute_from_matrix(pruned, cint.load_mem(currently_branching_out))
      tree[i+k] = best_function(pruned).reveal()
      print_ln("Next split %s", tree[i])
    end_if()
    
root_function(tree, data)
@for_range(len(tree))
def o(i):
  print_ln("%s",tree[i])
