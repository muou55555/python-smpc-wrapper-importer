no_clients = 2 # <% clients %>
bins = 2 # <% bins %>

data = sint.Matrix(bins,no_clients)
r = sint.Array(1)
r[0] = sint(0)

def output_random_triples(cond):
  @for_range(bins)
  def range_body(i):
    # naming as in Damgard et al
    y, r, w = sint.get_random_triple()
    v, un1, un2 = sint.get_random_triple()
    u = v * r
    outp = [y, r, w, v, u]
    print_ln("Imported... %s", y.reveal())
    print_ln("Imported... %s", r.reveal())
    print_ln("Imported... %s", w.reveal())
    print_ln("Imported... %s", v.reveal())
    print_ln("Imported... %s", u.reveal())
    output_shares(2, *outp)
    data[i][cond] = y
  return cond + 1

open_channel(0)
open_channel(1)

n = regint.public_input(1)
print_ln("Dataset size %s", n)

open_channel(2)

while_loop(output_random_triples, lambda x: x < no_clients, 0)

open_channel(3) # construct triples
open_channel(4) # get data

def import_data(cond):
  @for_range(bins)
  def range_body(i):
    # naming as in Damgard et al
    y = cint.public_input(1000)
    print_ln("Imported... %s", data[i][cond].reveal())
    r[0] = r[0] + y + data[i][cond]
  return cond + 1

while_loop(import_data, lambda x: x < no_clients, 0)

open_channel(500)
cint.public_output(r[0].reveal())

close_channel(4)
close_channel(3)
close_channel(2)
close_channel(1)
close_channel(0)